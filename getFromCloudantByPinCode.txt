

var nodemailer = require('nodemailer');

function main(params) {

    var cloudantOrError = getCloudantAccount(params);
    if (typeof cloudantOrError !== 'object') {
        return Promise.reject(cloudantOrError);
    }
    var cloudant = cloudantOrError;

    var dbName = params.dbname;
    

  if(!dbName) {
    return Promise.reject('dbname is required.');
  }
  
  if(dbName == 'sendemail'){
    return sendMailMainFunc(params);
  }
  
  var query = params.query;
  var pincode = params.pincode;
  
  if(!pincode) {
    return Promise.reject('pincode field is required.');
  }
  
  var query1='{ "selector": {"pincode": { "$eq": "'+ pincode + '" }} }';
  
console.log((typeof query1));
    if (!dbName) {
        return Promise.reject('dbname is required.');
    }
    
    var cloudantDb = cloudant.use(dbName);

    if (typeof query1 === 'object') {
        query1 = query1;
    } else if (typeof query1 === 'string') {
        try {
            query1 = JSON.parse(query1);
        } catch (e) {
            return Promise.reject('query field cannot be parsed. Ensure it is valid JSON.');
        }
    } else {
        return Promise.reject('query field is ' + (typeof query) + ' and should be an object or a JSON string.');
    }

    return queryIndex(cloudantDb, query1);

}

function queryIndex(cloudantDb, query) {
    return new Promise(function (resolve, reject) {
        cloudantDb.find(query, function (error, response) {
            if (!error) {
                resolve(response.docs[0]);
            } else {
                console.log('error', error);
                reject(error);
            }
        });
    });
}

function getCloudantAccount(params) {

    var Cloudant = require('@cloudant/cloudant');
    var cloudant;

    if (!params.iamApiKey && params.url) {
        cloudant = Cloudant(params.url);
    } else {
        checkForBXCreds(params);

        if (!params.host) {
            return 'Cloudant account host is required.';
        }

        if (!params.iamApiKey) {
            if (!params.username || !params.password) {
                return 'You must specify parameter/s of iamApiKey or username/password';
            }
        }

        var protocol = params.protocol || 'https';
        if (params.iamApiKey) {
            var dbURL = `${protocol}://${params.host}`;
            if (params.port) {
                dbURL += ':' + params.port;
            }
            cloudant = new Cloudant({
                url: dbURL,
                plugins: {iamauth: {iamApiKey: params.iamApiKey, iamTokenUrl: params.iamUrl}}
            });
        } else {
            var url = `${protocol}://${params.username}:${params.password}@${params.host}`;
            if (params.port) {
                url += ':' + params.port;
            }
            cloudant = Cloudant(url);
        }
    }
    return cloudant;
}

function checkForBXCreds(params) {

    if (params.__bx_creds && (params.__bx_creds.cloudantnosqldb || params.__bx_creds.cloudantNoSQLDB)) {
        var cloudantCreds = params.__bx_creds.cloudantnosqldb || params.__bx_creds.cloudantNoSQLDB;

        if (!params.host) {
            params.host = cloudantCreds.host || (cloudantCreds.username + '.cloudant.com');
        }
        if (!params.iamApiKey && !cloudantCreds.apikey) {
            if (!params.username) {
                params.username = cloudantCreds.username;
            }
            if (!params.password) {
                params.password = cloudantCreds.password;
            }
        } else if (!params.iamApiKey) {
            params.iamApiKey = cloudantCreds.apikey;
        }
    }

}

function sendMailMainFunc(params)
{
    if (!params.email) {
            response.msg = "Error: Destination e-mail was not provided.";
            response.code = 400;
    }


let smtpConfig = {
     host: 'smtp.mail.yahoo.com', // you can also use smtp.gmail.com
    port: 465,
    secure: true, // use TLS
    auth: {
        user: 'IBMcovid19demo@yahoo.com', 
        pass: 'spgnipzkusuytkbe'
    }
};

    return new Promise(function (resolve, reject) {
        let response = {
            code: 200,
            msg: 'E-mail was sent successfully!'
        };

        
     
        

        if (response.code != 200) {
            reject(response);
        }

        console.log('Validation was successful, preparing to send email...');

        sendEmail(params, smtpConfig, function (email_response) {
            response.msg = email_response['msg'];
            response.code = email_response['code'];
            response.reason = email_response['reason'];
            resolve(response);
        });

    });

}

function sendEmail(params,smtpConfig, callback) {

    let transporter = nodemailer.createTransport(smtpConfig);
    
    
    let mailOptions = {
        from: smtpConfig.auth.user,
        to: "s.ukreddy@gmail.com",
        subject: 'Booking Order Reference',
        html:`Dear User, <br/> <br/>Your order is placed with the vendor
        and you will receive a notification once the order is 
        out for delivery. <br/><br/>Regards,<br/>Watson Assistant`
    };
    
    
    transporter.sendMail(mailOptions, function (error, info) {

        let email_response = {
            code: 200,
            msg: 'Email was sent successfully',
            reason: 'Success'
        };

        if (error) {
            email_response.msg = 'Error';
            email_response.code = 500;
            email_response.reason = error;
        }
        else {
            email_response.msg = info.response;
            email_response.code = 200;
            email_response.reason = info.response;
        }
        console.log("sendmail");
       callback(email_response);
    });
}




